gg3 <- gg + geom_ribbon()
gg3
gg3 <- gg + geom_boxplot()
gg3
gg<- ggplot(data=iris, mapping=aes(x=Sepal.Length,y=Sepal.Width, z=Petal.Width, col=Species)) # esto es lo de hacerlo por capas
gg2 <- gg + geom_point()# vamos creando distintas capas y le vamos sumando cosas
gg3 <- gg + geom_boxplot()
gg4 <- gg + geom_contour_filled()
gg2
gg4
gg3
gg + geom_point(col='darkblue', size=3) + geom_line(col='orange', size = 5)
gg + geom_point(col='darkblue', size=3) + geom_line(col='orange', size = 1)
gg + geom_point(col='darkblue', size=3) + geom_line(col='orange')
gg + geom_point(col='darkblue', size=3) + geom_line(col='orange', size=0.5)
gg2 <- gg + geom_point()# vamos creando distintas capas y le vamos sumando cosas
gg2
gg<- ggplot(data=iris, mapping=aes(x=Sepal.Length,y=Sepal.Width, col=Species)) # esto es lo de hacerlo por capas
gg2 <- gg + geom_point()# vamos creando distintas capas y le vamos sumando cosas
gg2
gg + geom_point(col='darkblue', size=3) + geom_line(col='orange', size=0.5)
gg2
gg + geom_point(col='darkblue', size=3) + geom_line(col='orange', size=0.5)
gg + geom_point(size=3) + geom_line(size=0.5)
gg<- ggplot(data=iris, mapping=aes(x=Sepal.Length,y=Sepal.Width)) # esto es lo de hacerlo por capas
gg + geom_point(size=3) + geom_line(size=0.5)
gg + geom_point(size=3, col="red") + geom_line(size=0.5, col=Species)
gg + geom_point(size=3, col="red") + geom_line(size=0.5, col='Species')
gg + geom_point(size=3, col="red") + geom_line(aes(col=Species, linetype=Species))
gg + geom_point(size=3, col="lightblue") + geom_line(aes(col=Species, linetype=Species))
gg + geom_point(size=3, col="yellow") + geom_line(aes(col=Species, linetype=Species))
gg + geom_point(size=3, col="lightblue") + geom_line(aes(col=Species, linetype=Species))
install.packages("ISLR")
library(ISLR)
data(Carseats)
str(Carseats)
gg_bars <- ggplot(data=ISLR, aes(x=Sales))
gg_bars <- ggplot(data=Carseats, aes(x=Sales))
gg_bars + geom_bar(col='red')
gg_bars + geom_histogram(bins=50,col='red')
gg_bars + geom_histogram(bins=50,fill='red')
gg_bars + geom_bar(col='darkblue')
gg_bars + geom_bar(col='darkblue', size=10)
gg_bars <- ggplot(data=Carseats, aes(x=Sales, fill=Urban))
gg_bars + geom_histogram(bins=50,fill='red') #son como las barras q salen en el histograma
gg_bars + geom_histogram(bins=50) #son como las barras q salen en el histograma
gg_bars <- ggplot(data=Carseats, aes(x=Sales, color=Urban))
gg_bars + geom_histogram(bins=50) #son como las barras q salen en el histograma
gg_bars <- ggplot(data=Carseats, aes(x=Sales, fill=Urban))
gg_bars + geom_histogram(bins=50) #son como las barras q salen en el histograma
gg_bars + geom_histogram(position='dodge',bins=50) #son como las barras q salen en el histograma
gg_bars + geom_density()
gg_bars + geom_density(alpha=0.3)
#
Carseats$Education <- as.ordered(Carseats$Education)
ggplot(data=Carseats, aes(x=Education)) + geom_bar()
# coord_flip() podemos rotar las coordenadas
##FACETS
gg_bars + geom_density(alpha=0.3) + facet_grid(Urban ~ .)
scale_color_manual( # para controlar la leyenda
name = 'Colorcito',
breaks = c('D','E','F','G','H','I','J'),
labels = c('dd','ee','ff','gg','hh','ii','jj')
values= c('red','blue','yellow','orange','green','brown','gray')
ggplot(data=diamonds, aes(x=carat, y=price, col=color)) +
geom_point()+
scale_x_continuous(name='Peso') +# nombre del eje X
scale_y_sqrt(name = 'Precio') +# nombre del eje Y y ademas escalado cuadratico
geom_smooth(method = 'lm', col='black') # hacer mas smooth con el model linear model
scale_color_manual( # para controlar la leyenda
name = 'Colorcito',
breaks = c('D','E','F','G','H','I','J'),
labels = c('dd','ee','ff','gg','hh','ii','jj')
values= c('red','blue','yellow','orange','green','brown','gray')
ggplot(data=diamonds, aes(x=carat, y=price, col=color)) +
geom_point()+
scale_x_continuous(name='Peso') +# nombre del eje X
scale_y_sqrt(name = 'Precio') +# nombre del eje Y y ademas escalado cuadratico
geom_smooth(method = 'lm', col='black') # hacer mas smooth con el model linear model
scale_color_manual( # para controlar la leyenda
name = 'Colorcito',
breaks = c('D','E','F','G','H','I','J'),
labels = c('dd','ee','ff','gg','hh','ii','jj'),
values= c('red','blue','yellow','orange','green','brown','gray')
)
scale_color_manual( # para controlar la leyenda
name = 'Colorcito',
breaks = c('D','E','F','G','H','I','J'),
labels = c('dd','ee','ff','gg','hh','ii','jj'),
values= c('red','blue','yellow','orange','green','brown','gray')
)
# Juntando todo
ggplot(data=diamonds, aes(x=carat, y=price, col=color)) +
geom_point()+
scale_x_continuous(name='Peso') +# nombre del eje X
scale_y_sqrt(name = 'Precio') +# nombre del eje Y y ademas escalado cuadratico
geom_smooth(method = 'lm', col='black') +# hacer mas smooth con el model linear model
scale_color_manual( # para controlar la leyenda
name = 'Colorcito',
breaks = c('D','E','F','G','H','I','J'),
labels = c('dd','ee','ff','gg','hh','ii','jj'),
values= c('red','blue','yellow','orange','green','brown','gray')
)
# multiples graficos
library(gridExtra)
install.packages("gridExtra")
# multiples graficos
library(gridExtra)
g1<- ggplot(data=diamonds, aes(x= carat, y=price, col=color))
g1_1 <- g1 + geom_point(alpha=0.4)
g1_2 <- g1_1 + scale_color_discrete(name='Color')
g1_2
g2<- ggplot(data=diamonds, aes(x= carat, y=price, col=clarity))
g2_1 <- g1 + geom_point(alpha=0.4)
g2_2 <- g1_1 + scale_color_discrete(name='Color')
g2_2
grid.arrange(g1_2, g2_2, nrow=1)
## Ejercicios
library(ggplot2)
#Resumen del contenido del set de datos de iris
data("iris")
str(iris)
summary(iris)
plot(iris$Sepal.Length, iris$Sepal.Width)
#ggplot2: Scatter plot de longitud vs anchura de sepalos
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width))
#ggplot2: Scatter plot de longitud vs anchura de sepalos
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point()
#ggplot2: Scatter plot de longitud vs anchura de sepalos
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point(aes(col=Species))
#ggplot2: Scatter plot de longitud vs anchura de sepalos. Colro de los puntos sean verdes
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width), col='green') +
geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width), col='green') +
geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width), col='green') +
geom_point()
#ggplot2: Scatter plot de longitud vs anchura de sepalos. Colro de los puntos sean verdes
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, col='green')) +
geom_point()
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, col='green')) +
geom_point()
#ggplot2: Scatter plot de longitud vs anchura de sepalos. Colro de los puntos sean verdes
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point(col='green')
#ggplot2: Scatter plot de longitud vs anchura de sepalos
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point()
#ggplot2: Scatter plot de longitud vs anchura de sepalos. Colro de los puntos sean segun la especie
ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point(aes(col=Species))
## Ej2
#Set de datos diamonds
data("diamonds")
str(diamonds)
summary(diamonds)
#Aesthetics de posicion
#Variables continuas
ggplot(diamonds, aes(x=carat, y=price))+
geom_point()
summary(iris)
str(iris)
summary(iris)
data("diamonds")
str(diamonds)
summary(diamonds)
# Scatter plot de una variable continua versus una discreta
ggplot(diamonds, aes(x=carat, y=cut))+
geom_point()
ggplot(diamonds, aes(x=carat, y=cut))+
geom_jitter()
geom_jitter(aes(col='price')
ggplot(diamonds, aes(x=carat, y=cut))+
ggplot(diamonds, aes(x=carat, y=cut))+
geom_jitter(aes(col='price'))
ggplot(diamonds, aes(x=carat, y=cut))+
geom_point(posiiton='jitter')
ggplot(diamonds, aes(x=carat, y=cut))+
geom_point(positon='jitter')
ggplot(diamonds, aes(x=carat, y=cut))+
geom_point(position='jitter')
str(diamonds)
# Scatter plot de dos variables discretas
ggplot(diamonds, aes(x=color, y=cut))+
geom_point(position='jitter')
# Scatter plot de dos variables discretas
ggplot(diamonds, aes(x=color, y=cut))+
geom_point()
(position='jitter
ggplot(diamonds, aes(x=color, y=cut))+
geom_point(position='jitter')
ggplot(diamonds, aes(x=color, y=cut))+
geom_point(position='jitter')
# Aesthetic de transparencia con alpha
ggplot(diamonds, aes(x=carat, y=price, alpha=clarity))+
geom_point()
str(diamonds)
# Transparencia como atributo: dar un valor concreto de alpha entre 0 y 1
ggplot(diamonds, aes(x=carat, y=price, alpha=0.3))+
geom_point(col='red')
# Transparencia como atributo: dar un valor concreto de alpha entre 0 y 1
ggplot(diamonds, aes(x=carat, y=price, alpha=0.3,))+
geom_point(aes(col=depth))
# Transparencia como atributo: dar un valor concreto de alpha entre 0 y 1
ggplot(diamonds, aes(x=carat, y=price, alpha=0.3))+
geom_point(aes(col=depth))
# Transparencia como atributo: dar un valor concreto de alpha entre 0 y 1
ggplot(diamonds, aes(x=carat, y=price))+
geom_point(aes(col=depth, alpha=0.4))
# Transparencia como atributo: dar un valor concreto de alpha entre 0 y 1
ggplot(diamonds, aes(x=carat, y=price))+
geom_point(alpha=0.4,aes(col=depth))
# Aesthetics de color
# Relleno como aesthetic y como atributo
ggplot(diamonds, aes(x=carat, y=price, fill='orange'))+
geom_point(alpha=0.4,aes(col=depth))
# Aesthetics de color
# Relleno como aesthetic y como atributo
ggplot(diamonds, aes(x=carat, y=price), fill='orange')+
geom_point(alpha=0.4)
# Aesthetics de color
# Relleno como aesthetic y como atributo
ggplot(diamonds, aes(x=carat, y=price))+
geom_point(fill='orange')
ggplot(diamonds, aes(x=carat, y=price))+
geom_point(fill='orange')
# Aesthetics como forma
# continua
ggplot(diamonds, aes(x=carat, shape=x*y*z))+
geom_point(fill='orange')
# Aesthetics como forma
# continua
ggplot(diamonds, aes(x=carat, y=price,shape=x*y*z))+
geom_point()
#discreta
ggplot(diamonds, aes(x=cut, y=price,shape=x*y*z))+
geom_point()
View(diamonds)
View(diamonds)
#discreta
ggplot(diamonds, aes(x=cut, y=clarity,shape=x*y*z))+
geom_point()
str(diamonds)
#discreta
ggplot(diamonds, aes(x=carat, y=price,shape=clarity))+
geom_point()
#discreta
ggplot(diamonds, aes(x=carat, y=price))+
geom_point(shape=1)
#discreta
ggplot(diamonds, aes(x=carat, y=price))+
geom_point(shape=54) # el valor 1 significa el primer valor de la lista de formas, es decir hay mas
# Tipo de linea como aesthetic, conitnua
ggplot(diamonds, aes(x=carat, y=price,linetype=x*y*z))+
geom_point()
# discreta
ggplot(diamonds, aes(x=carat, y=price,linteype=cut))+
geom_point()
# discreta
ggplot(diamonds, aes(x=carat, y=price,linteype=cut))+
geom_smooth()
# discreta
ggplot(diamonds, aes(x=carat, y=price,linteype=cut))+
geom_smooth(se=F,size1)
# discreta
ggplot(diamonds, aes(x=carat, y=price,linteype=cut))+
geom_smooth(se=F,size=1)
# discreta
ggplot(diamonds, aes(x=carat, y=price,linteype=cut, col=cut))+
geom_smooth(se=F,size=1)
#tipo de linea como atributo
ggplot(diamonds, aes(x=carat, y=price, col=cut))+
geom_smooth(se=F,size=1, linetype=dotdash)
#tipo de linea como atributo
ggplot(diamonds, aes(x=carat, y=price, col=cut))+
geom_smooth(se=F,size=1, linetype="dotdash")
#Aesthetic de size
ggplot(diamonds, aes(x=carat, y=price, size=price))+
geom_point()
#discreta
ggplot(diamonds, aes(x=carat, y=price, size=cut))+
geom_point()
#como atributo
ggplot(diamonds, aes(x=carat, y=price, size=cut))+
geom_point(size="")
#como atributo
ggplot(diamonds, aes(x=carat, y=price, size=cut))+
geom_point(size=2)
## Ej3
#Disintos tipos de graficas
data("iris")
## Ej3
#Disintos tipos de graficas
data("iris")
head(iris)
tail(iris)
# Una variable continua
gg<- ggplot(iris, aes(x=Petal.Length))
#Hist
gg + geom_histogram()
#Bars
gg + geom_bar()
#Density
gg+geom_density()
# Overplotting en scatter plots
data("mtcars")
geom_point(size=r
gg+
gg <- ggplot(mtcars,aes(x=as.factor(cy1), y=as.factor(am), col=as.factor(gear)))
gg+
geom_point(size=3)
atter plots
data("mtcars")
gg <- ggplot(mtcars,aes(x=as.factor(cy1), y=as.factor(am), col=as.factor(gear)))
gg+
geom_point(size=3)
gg+
geom_jitter(size=3)
gg <- ggplot(mtcars,aes(x=as.factor(cyl), y=as.factor(am), col=as.factor(gear)))
gg+
geom_point(size=3)
gg+
geom_jitter(size=3)
gg <- ggplot(mtcars,aes(x=cyl, y=as.factor(am), col=as.factor(gear)))
gg+
geom_point(size=3)
gg+
geom_jitter(size=3)
gg+
geom_point(size=2, position=position_jitter(width = 0.5,height = 0.5))
# Dos variables continuas
ggplot(diamonds, aes(x=carat, y=price))+
geom_scatter()
# Dos variables continuas
ggplot(diamonds, aes(x=carat, y=price))+
geom_jitter()
#linea
ggplot(diamonds, aes(x=carat, y=price))+
geom_line()
str(diamonds)
# var discreta y continua
ggplot(diamonds, aes(x=carat, y=cut))+
geom_boxplot()
ggplot(diamonds, aes(x=carat, y=cut))+
geom_violin()
#Posicionamiento de las barras en un grafico de barras
ggplot(mtcars, aes(x=as.factor(cyl), fill=as.factor(am)))+
geom_bar()
#Posicionamiento de las barras en un grafico de barras
gg<-ggplot(mtcars, aes(x=as.factor(cyl), fill=as.factor(am)))+
geom_bar() # por defecto sale una encima de la otra pero si no, ponemos position='stack'
#Posicionamiento de las barras en un grafico de barras
gg<-ggplot(mtcars, aes(x=as.factor(cyl), fill=as.factor(am))
gg+
#Posicionamiento de las barras en un grafico de barras
gg<-ggplot(mtcars, aes(x=as.factor(cyl), fill=as.factor(am)))
gg+
geom_bar() # por defecto sale una encima de la otra pero si no, ponemos position='stack'
gg+
geom_bar(position='dodge')
#uno encima del otro normalizado
gg+
geom_bar(position='fill')
## STATS
ggplot(iris, aes(x=Sepal.Length,
y=Sepal.Witdht,
col=Species))
## STATS
ggplot(iris, aes(x=Sepal.Length,
y=Sepal.Widht,
col=Species))
## STATS
ggplot(iris, aes(x=Sepal.Length,
y=Sepal.Widht,
col=Species)) +
geom_point()
## STATS
ggplot(iris, aes(x=Sepal.Length,
y=Sepal.Witht,
col=Species)) +
geom_point()
## STATS
ggplot(iris, aes(x=Sepal.Length,
y=Sepal.Widht,
col=Species)) +
geom_point()
## STATS
ggplot(iris, aes(x=Sepal.Length,
y=Sepal.Width,
col=Species)) +
geom_point()
## STATS
ggplot(iris, aes(x=Sepal.Length,
y=Sepal.Width,
col=Species)) +
geom_point()+
stat_smooth()
# Pintamos unicamente el stat
ggplot(iris, aes(x=Sepal.Length,
y=Sepal.Width,
col=Species)) +
stat_smooth()
# Modificamos el geom del stat: geom='line'
ggplot(iris, aes(x=Sepal.Length,
y=Sepal.Width,
col=Species)) +
stat_smooth(geom_line())
# Modificamos el geom del stat: geom='line'
ggplot(iris, aes(x=Sepal.Length,
y=Sepal.Width,
col=Species)) +
stat_smooth(geom='line')
# Modificamos los aesthetics del stat: fill=Species y un valor de alpha
ggplot(iris, aes(x=Sepal.Length,
y=Sepal.Width,
)) +
stat_smooth(aes(fill=Species), alpha=0.1))
# Modificamos los aesthetics del stat: fill=Species y un valor de alpha
ggplot(iris, aes(x=Sepal.Length,
y=Sepal.Width,
)) +
stat_smooth(aes(fill=Species), alpha=0.1)))
# Modificamos los aesthetics del stat: fill=Species y un valor de alpha
ggplot(iris, aes(x=Sepal.Length,
y=Sepal.Width,
)) +
stat_smooth(aes(fill=Species), alpha=0.1)
# FACETS
# Multigraficos en un eje
gg <- ggplot(diamonds, aes(x=carat,y=price,col=clarity))+
geom_point()
gg
# De una forma mucho mas clara ("desagregando" por clarity) -> facet_wrap(~clarity)
gg +
facet_wrap(~clarity) # crea un grafico por cada clarity q haya, en vez de 1 grafico con 7 puntos en la leyenda crea 7 graficas
# veamos un grafico de barras de distribucion de precios por corte
ggplot(diamonds, aes(x=cut))+geom_bar()
# veamos un grafico de barras de distribucion de precios por corte
ggplot(diamonds, aes(x=price, col=cut))+geom_bar()
# Mejorar la visualizacion normalizando
ggplot(diamonds, aes(x=price, col=cut))+geom_bar(position='fill')
# Como hay tantos datos, los desengranamos por cut
ggplot(diamonds, aes(x=price, col=cut))+
geom_bar(position='fill')+
facet_wrap(~cut)
# SCLAES
gg_cont<- ggplot(diamonds,aes(x=x*y*z, y=price))+
geom_point()
gg_cont
gg_cont+
scale_x_continuous(name='size',
limits= c(0,800),
breaks= seq(0,800,200),
minor_breaks = seq(0,800,100)) # usamos esta porq el eje X es continua, es decir, es una variable numerica
# Modificcion de escala sobre variable discreta_ modifica la variable discreta
# I1 SI2, VVS2, IF con las etiquetas Bad Normal Good Ideal
# Limita la variable "y" entre 1000 y 2000
gg_cont+
scale_y_continuous(limits = c(1000,2000))+
scale_x_discrete(name='Clasification',
labels=c("Bad","Normal","Good","Ideal"))
# Modificcion de escala sobre variable discreta_ modifica la variable discreta segun 4 lniveles
# I1 SI2, VVS2, IF con las etiquetas Bad Normal Good Ideal, respectivamente
# Limita la variable "y" entre 1000 y 2000
gg_disc<- ggplot(diamonds,aes(x=clarity, y=price))+
geom_point()
gg_disc+
scale_y_continuous(limits = c(1000,2000))+
scale_x_discrete(name='Clasification',
labels=c("Bad","Normal","Good","Ideal"))
gg_disc+
scale_y_continuous(limits = c(1000,2000))+
scale_x_discrete(name='Clasification',
breaks=c("I1","SI2","VVS22","IF")
labels=c("Bad","Normal","Good","Ideal"))
gg_disc+
scale_y_continuous(limits = c(1000,2000))+
scale_x_discrete(name='Clasification',
breaks=c("I1","SI2","VVS22","IF"),
labels=c("Bad","Normal","Good","Ideal"))
gg_disc+
scale_y_continuous(limits = c(1000,2000))+
scale_x_discrete(breaks=c("I1","SI2","VVS22","IF"),
labels=c("Bad","Normal","Good","Ideal"))
# Modificcion de escala sobre variable discreta_ modifica la variable discreta segun 4 lniveles
# I1 SI2, VVS2, IF con las etiquetas Bad Normal Good Ideal, respectivamente
# Limita la variable "y" entre 1000 y 2000
gg_disc<- ggplot(diamonds,aes(x=clarity, y=price))+
geom_jitter()
gg_disc+
scale_y_continuous(limits = c(1000,2000))+
scale_x_discrete(breaks=c("I1","SI2","VVS22","IF"),
labels=c("Bad","Normal","Good","Ideal"))
gg_disc+
scale_y_continuous(limits = c(1000,2000))+
scale_x_discrete(limits=c("I1","SI2","VVS22","IF"),
labels=c("Bad","Normal","Good","Ideal"))
gg_disc+
scale_y_continuous(limits = c(1000,2000))+
scale_x_discrete(limits=c("I1","SI2","VVS2","IF"),
labels=c("Bad","Normal","Good","Ideal"))
gg_disc+
scale_y_continuous(limits = c(1000,2000))+
scale_x_discrete(breaks=c("I1","SI2","VVS2","IF"),
labels=c("Bad","Normal","Good","Ideal"))
gg_disc+
scale_y_continuous(limits = c(1000,2000))+
scale_x_discrete(limits=c("I1","SI2","VVS2","IF"),
labels=c("Bad","Normal","Good","Ideal"))
gg_disc+
scale_y_continuous(limits = c(1000,2000))+
scale_x_discrete(limits=c("I1","SI2","VVS2","IF"),
labels=c("Bad","Normal","Good","Ideal"))+
theme_gdocs()
