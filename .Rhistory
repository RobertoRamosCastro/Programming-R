df <- rbind(df, data.frame(mpg = 22, cyl=5,disp=202,hp=100,drat=2.56,wt=3.1,
qsec=15,vs=1,am=0,gear=5,carb=4, row.names=c("Seat"))
df <- rbind(df, data.frame(mpg = 22, cyl=5,disp=202,hp=100,drat=2.56,wt=3.1,
df
df2 <- data.frame(mpg = 22, cyl=5,disp=202,hp=100,drat=2.56,wt=3.1,
qsec=15,vs=1,am=0,gear=5,carb=4, row.names=c("Seat"))
df <- rbind(df, df2)
df <- read.csv("mtcars.csv")
df <- rbind(df, df2)
df2 <- data.frame(mpg = 22, cyl=5,disp=202,hp=100,drat=2.56,wt=3.1,
qsec=15,vs=1,am=0,gear=5,carb=4, row.names=c("Seat"))
df <- read.csv("mtcars.csv")
df <- rbind(df, df2)
View(df2)
View(df)
View(df2)
df <- rbind(df[-1], df2)
df
df$newcolumn<-rep(1, nrow(df))
df[, 'copyofhp'] <- df$hp
df$hp.gear <- df$hp / df$gear
v <- 1:nrow(df)
df <- cbind(df,v)
df$newcolumn<-rep(1, nrow(df))
df[, 'copyofhp'] <- df$hp
df$hp.gear <- df$hp / df$gear
v <- 1:nrow(df)
df <- cbind(df,v)
df$newcolumn<-rep(1, nrow(df))
df[, 'copyofhp'] <- df$hp
df$hp.gear <- df$hp / df$gear
v <- 1:nrow(df)
df <- cbind(df,v)
# para unir data frames lo mejor es usar rbind(df1,df2) obteniendo un dataframe con mas filas
df2 <- data.frame(mpg = 22, cyl=5,disp=202,hp=100,drat=2.56,wt=3.1,
qsec=15,vs=1,am=0,gear=5,carb=4, row.names=c("Seat"))
df <- read.csv("mtcars.csv")
df <- rbind(df[-1], df2)
df
# para añadir columnas
df$newcolumn<-rep(1, nrow(df))
df[, 'copyofhp'] <- df$hp
df$hp.gear <- df$hp / df$gear
v <- 1:nrow(df)
df <- cbind(df,v)
df$newcolumn<-rep(1, nrow(df))
df[, 'copyofhp'] <- df$hp
df$hp.gear <- df$hp / df$gear
v <- 1:nrow(df)
df <- cbind(df,v)
debug()
df$newcolumn<-rep(1, nrow(df))
df[, 'copyofhp'] <- df$hp
df$hp.gear <- df$hp / df$gear
v <- 1:nrow(df)
df <- cbind(df,v)
df$hp.gear <- df$hp / df$gear
v <- 1:nrow(df)
df$newcolumn<-rep(1, nrow(df))
df[, 'copyofhp'] <- df$hp
df$hp.gear <- df$hp / df$gear
v <- 1:nrow(df)
df <- cbind(df,v)
# para añadir columnas
df$newcolumn<-rep(1, nrow(df))
df[, 'copyofhp'] <- df$hp
df$hp.gear <- df$hp / df$gear
v <- 1:nrow(df)
df <- cbind(df,v)
View(df2)
View(df2)
View(df)
View(df)
df <- data.frame(col1 = c1, col2=c2)
c1 <- 1:10 # vector de enteros
c2 <- letters[1:10] # vector de letras
df <- data.frame(col1 = c1, col2=c2)
df
tail(df,4)
# funcion head(df, X) devuelve los primeros X valores del dataframe
# funcion tail(df, X) devuelve los ultimos X valores del dataframe
# funcion str(df) muestra de forma rapida la estrucutrar de la informacion almcenada
str(df)
summary(df)
df <- read.csv("mtcars.csv")
df2 <- data.frame(mpg = 22, cyl=5,disp=202,hp=100,drat=2.56,wt=3.1,
qsec=15,vs=1,am=0,gear=5,carb=4, row.names=c("Seat"))
df2
df <- read.csv("mtcars.csv")
df
df <- read.csv("mtcars.csv")
df
df <- read.csv("mtcars.csv")
df
# para añadir columnas
df$newcolumn<-rep(1, nrow(df))
df
# para añadir columnas
df$newcolumn<-rep(3, nrow(df)) # no se q hace $ pero rep(1,nrow(df)) nos crea una replica del numero de filas en df y todos sus observaciones seran igua la 1
df
# para añadir columnas
df$newcolumn2<-rep(3, nrow(df)) # no se q hace $ pero rep(1,nrow(df)) nos crea una replica del numero de filas en df y todos sus observaciones seran igua la 1
df
df[-1]
df <- data.frame(col1 = c1, col2=c2)
df
tail(df,4)
df2 <- data.frame(mpg = 22, cyl=5,disp=202,hp=100,drat=2.56,wt=3.1,
qsec=15,vs=1,am=0,gear=5,carb=4, row.names=c("Seat"))
df2
df <- read.csv("mtcars.csv")
df
df <- rbind(df, df2)
View(df)
# para unir data frames lo mejor es usar rbind(df1,df2) obteniendo un dataframe con mas filas
df2 <- data.frame("model",mpg = 22, cyl=5,disp=202,hp=100,drat=2.56,wt=3.1,
qsec=15,vs=1,am=0,gear=5,carb=4, row.names=c("Seat")) #estamos creando un nuevo modelo de coche para añadirselo a la base de datos mtcars
df2
# para unir data frames lo mejor es usar rbind(df1,df2) obteniendo un dataframe con mas filas
df2 <- data.frame(model="model",mpg = 22, cyl=5,disp=202,hp=100,drat=2.56,wt=3.1,
qsec=15,vs=1,am=0,gear=5,carb=4, row.names=c("Seat")) #estamos creando un nuevo modelo de coche para añadirselo a la base de datos mtcars
df2
# para unir data frames lo mejor es usar rbind(df1,df2) obteniendo un dataframe con mas filas
df2 <- data.frame(mpg = 22, cyl=5,disp=202,hp=100,drat=2.56,wt=3.1,
qsec=15,vs=1,am=0,gear=5,carb=4, row.names=c("Seat")) #estamos creando un nuevo modelo de coche para añadirselo a la base de datos mtcars
df2
df <- read.csv("mtcars.csv")
df
# para unir data frames lo mejor es usar rbind(df1,df2) obteniendo un dataframe con mas filas
df2 <- data.frame(model='Seat',mpg = 22, cyl=5,disp=202,hp=100,drat=2.56,wt=3.1,
qsec=15,vs=1,am=0,gear=5,carb=4) #estamos creando un nuevo modelo de coche para añadirselo a la base de datos mtcars
df2
df <- read.csv("mtcars.csv")
df
df <- rbind(df, df2)
df
# para unir data frames lo mejor es usar rbind(df1,df2) obteniendo un dataframe con mas filas
df2 <- data.frame(model='Seat Ibiza FR 4.0',mpg = 22, cyl=5,disp=202,hp=100,drat=2.56,wt=3.1,
qsec=15,vs=1,am=0,gear=5,carb=4) #estamos creando un nuevo modelo de coche para añadirselo a la base de datos mtcars
df2
df <- read.csv("mtcars.csv")
df
df <- rbind(df, df2)
df
# para añadir columnas
df$newcolumn<-rep(1, nrow(df)) # df$newcolum lo q haces es crear una nueva columna con ese nombre y rep(1,nrow(df)) nos crea una replica del numero de filas en df y todos sus observaciones seran igua la 1
df
df[, 'copyofhp'] <- df$hp #
df
df$hp.gear <- df$hp / df$gear #creamos uan columna q se llama hp.gear con los valores de hp/gear
df
v <- 1:nrow(df) # creamos vector q tengo el numero de filas de df
v
df <- cbind(df,v) # bindeamos dataframe y vector
df
df$model
str(df)
summary(df)
# queremos las 4 pirmeras filas de columnas concretas
df[1:4, c('hp','gear', 'am')]
subset(df, hp > 150 & hp < 200)
vrow <- as.numeric(as.vector(df[1,]))
class(vrow)
vrow
c1 <- 1:10
c2 <- letters[1:10]
c3 <- 5:20
c4 <- letters[5:20]
df <- data.frame(c(c1,c2,c3,c4))
df
df <- data.frame(col1=c1,col2=c2,col3=c3,col4=c4)
df
df <- data.frame(col1=c1,col2=c2,col3=c3,col4=c4)
df.x <- data.frame(col1=c1,col2=c2)
df.x
df.y <- data.frame(col3=c3,col4=c4)
df.y
df_total <- rbind(df.x,df.y)
join <- merge(df.x,df.y)
join
join <- merge(df.x,df.y, by=c("col1"))
join
rm(join)
join <- merge(df.x,df.y, by=c("col1"))
df.y <- data.frame(col1=c3,col2=c4)
df.y
join <- merge(df.x,df.y, by=c("col1"))
join
#borrar variables
rm(join)
join <- merge(df.x,df.y)
join
, by=c("col1")
#borrar variables
rm(join)
join <- merge(df.x,df.y, by=c("col1"))
join
left.join <- merge(df.x,df.y, by=c("col1"), all.x = T)
left.join
df.x
df.y
left.join <- merge(df.y,df.x, by=c("col1"), all.x = T) # crea un dataframe con todos los valroes que coincide en la columna 'col1' aunq una de las dos tablas no tenga valores
left.join
right.join <- merge(df.x,df.y, by=c('col1'), all.y = T)
right.join
left.join <- merge(df.x,df.y, by=c("col1"), all.y = T) # crea un dataframe con todos los valroes que coincide en la columna 'col1' aunq una de las dos tablas no tenga valores
left.join # y depende de que dataframe pongas en la izq, se copian sus columnas q no coincide
# tocando los parametros all.x,all.y, colocando en la posicion izq o derecha cada dataframe puedo obtener lo mismo con right o left join
full.join <- merge(df.x,df.y, by=c('col1'), all = T)
full.join
planets <- c("Mercury","Venus","Earth","Mars","Saturn","Uranus","Neptune",)
planets <- c("Mercury","Venus","Earth","Mars","Saturn","Uranus","Neptune")
type <- c("Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet")
diameter <- c(0.382,0.949,0.532,11.209,9.449,4.007,3.883)
rotation <- c(58.64,-243.02,1,1.03,0.41,0.43,-0.72,0.67)
rings <- c(F,F,F,F,T,T,T,T)
plantes_df <- data.frame(col1=planets, col2=type, col3=diameter, col4=rotation, col5=rings)
planets <- c("Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune")
type <- c("Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet")
diameter <- c(0.382,0.949,0.532,11.209,9.449,4.007,3.883)
rotation <- c(58.64,-243.02,1,1.03,0.41,0.43,-0.72,0.67)
rings <- c(F,F,F,F,T,T,T,T)
plantes_df <- data.frame(col1=planets, col2=type, col3=diameter, col4=rotation, col5=rings)
type <- c("Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet")
diameter <- c(0.382,0.949,0.532,11.209,9.449,4.007,3.883)
rotation <- c(58.64,-243.02,1,1.03,0.41,0.43,-0.72,0.67)
rings <- c(F,F,F,F,T,T,T,T)
plantes_df <- data.frame(col1=planets, col2=type, col3=diameter, col4=rotation, col5=rings)
planets <- c("Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune")
type <- c("Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet")
diameter <- c(0.382,0.949,0.532,11.209,9.449,4.007,3.883)
rotation <- c(58.64,-243.02,1,1.03,0.41,0.43,-0.72,0.67)
rings <- c(F,F,F,F,T,T,T,T)
planets <- c("Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune")
type <- c("Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet")
diameter <- c(0.382,0.949,1,0.532,11.209,9.449,4.007,3.883)
rotation <- c(58.64,-243.02,1,1.03,0.41,0.43,-0.72,0.67)
rings <- c(F,F,F,F,T,T,T,T)
plantes_df <- data.frame(col1=planets, col2=type, col3=diameter, col4=rotation, col5=rings)
planets_df <- data.frame(col1=planets, col2=type, col3=diameter, col4=rotation, col5=rings)
plan
planets_df
planets_df <- data.frame(planets, type, diameter,rotation, rings)
planets_df
rm(plantes_df)
# Compruebo contenido del df
str(planets_df)
summary(planets_df)
# selecciona la informacion de los tres primeros planetsa (mas cercanos al sol)
planets_df[1:3]
# selecciona la informacion de los tres primeros planetsa (mas cercanos al sol)
tres_primeros<-planets_df[1:3]
tres_primeros
# selecciona la informacion de los tres primeros planetsa (mas cercanos al sol)
tres_primeros<-planets_df[1:3,]
tres_primeros
# selecciona 3 ultimos
tres_ultimos<-tail(planets_df,3)
tres_ultimos
View(planets_df)
#Selecciona la columna diameter de los ultimos seis planetas (los mas lejanos al sol)
tail(planets_df["diameter"],6)
#Selecciona la columna diameter de los ultimos seis planetas (los mas lejanos al sol)
tail(planets_df$diameter,6)
# selecciona solo planetas q tienen anillos
planets_rings <- planets_df[which(planets_df["rings"]<-T)]
planets_rings
# selecciona solo planetas q tienen anillos
planets_rings <- planets_df[which(planets_df["rings"]<-TRUE)]
planets_rings
# selecciona solo planetas q tienen anillos
planets_rings <- planets_df$rings
planets_rings
# selecciona solo planetas q tienen anillos
planets_rings <- planets_df[planets_df$rings,]
planets_rings
rings <- c(F,F,F,F,T,T,T,T)
planets_rings <- planets_df[planets_df$rings,]
planets_rings
planets <- c("Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune")
type <- c("Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet","Terrestral planet")
diameter <- c(0.382,0.949,1,0.532,11.209,9.449,4.007,3.883)
rotation <- c(58.64,-243.02,1,1.03,0.41,0.43,-0.72,0.67)
rings <- c(F,F,F,F,T,T,T,T)
planets_df <- data.frame(planets, type, diameter,rotation, rings)
planets_df
# selecciona solo planetas q tienen anillos
planets_rings <- planets_df[planets_df$rings,]
planets_rings
# La funcion order devuevle las posiciones de un vector ordenado ascendentemente
a<-c(4,10,3)
order(a)
a[order(a)]
a
# seleccionar los planetas que tiene un diametro inferior al de la tierra
diameter_menor_1 <- planets_df$diameter < 1
diameter_menor_1
# seleccionar los planetas que tiene un diametro inferior al de la tierra
diameter_menor_1 <- planets_df[planets_df$diameter < 1]
diameter_menor_1
# seleccionar los planetas que tiene un diametro inferior al de la tierra
diameter_menor_1 <- planets_df[planets_df$diameter < 1]
diameter_menor_1
# seleccionar los planetas que tiene un diametro inferior al de la tierra
diameter_menor_1 <- planets_df[which(planets_df$diameter < 1)]
diameter_menor_1
planets_df
diameter_menor_1[T]
# seleccionar los planetas que tiene un diametro inferior al de la tierra
diameter_menor_1 <- planets_df$diameter < 1
diameter_menor_1[T]
# seleccionar los planetas que tiene un diametro inferior al de la tierra
diameter_menor_1 <- planets_df[planets_df$diameter < 1,]
diameter_menor_1
# ordenamos el data frame segun el diametro de los planetas ascendentemente
planets_df$diameter[order(diameter)]
# descendentemente
planets_df$diameter[order(diameter, decreasing = T)]
my_list <- list(1:9)
my_list
my_list[3]
my_list[[3]]
my_list <- list(1,2,3,4,5)
my_list
my_list[3]
my_list[[3]]
class(my_list[3]) # devuelve una lista
class(my_list[[3]])# devuelve una matriz
## EJ6
actors<- c("Jack", "Sheely","Danny","Scatman","Barry")
actors<- c("Jack", "Sheely","Danny","Scatman","Barry")
scores <- c(4.5,4.0,5.0)
comments <- c("Best Horror Film I Have Ever Seen","A truly brillian and scary film from Stanley Kubrick","A masterpiece of psychological horro")
sources<-c("IMDb1","IMDb2","IMDb3")
reviews<- data.frame(scores,sources,comments)
reviews
reseñas
# Crea una lista q contenga los siguitnes components:
# 1. moviename: The Shinning
# 2. actors: el vector de actores
# 3. reviews: el data frame de reviews
shinning_list <- list("moviename"= "The Shinning", "actores"<- actors, "reseñas"<-reviews)
shinning_list
# Crea una lista q contenga los siguitnes components:
# 1. moviename: The Shinning
# 2. actors: el vector de actores
# 3. reviews: el data frame de reviews
shinning_list <- list(moviename= "The Shinning", actores=actors, reviews=reviews)
shinning_list
# selecciona el ultimo ctor del vector de ac tores de la lsita
shinning_list[2[5]]
# selecciona el ultimo ctor del vector de ac tores de la lsita
shinning_list["actores"[5]]
# selecciona el ultimo ctor del vector de ac tores de la lsita
shinning_list[tail("actores",1)]
# selecciona el ultimo ctor del vector de ac tores de la lsita
shinning_list[[2]][5]
# selecciona el ultimo ctor del vector de ac tores de la lsita
shinning_list[["actores"]][5]
#Selecciona la segunda de las criticas del dat frame de reviews de la lista
shinning_list[["reviews"]][2]
#Selecciona la segunda de las criticas del dat frame de reviews de la lista
shinning_list[["reviews"]][1,2]
#Selecciona la segunda de las criticas del dat frame de reviews de la lista
shinning_list[["reviews"]]
#Selecciona la segunda de las criticas del dat frame de reviews de la lista
shinning_list[["reviews"]][2,]
# Añade un nuevo elemento a la lista
# 1. year: 1980
shinning_list_full <- c(shinning_list, year=1980)
shinning_list_full
# Añade un nuevo elemento a la lista
# 1. year: 1980
shinning_list <- c(shinning_list, year=1980)
shinning_list
str(shinning_list)
rm(shinning_list_full)
name_function(9)
name_function <- function(parameters){
print("Como llamar a la funcion")
}
name_function(9)
name_function <- function(parameters){
print(parameters)
}
name_function(9)
# CRAN donde se almacenan todos los paqutes de R
# Familia de apply
m<- matrix(1:10, nrow = 3)
m
# CRAN donde se almacenan todos los paqutes de R
# Familia de apply
m<- matrix(1:12, nrow = 3)
m
apply(m, 1, sqrt)
apply(m, 1:2, sqrt) #le pasamos la lsita, vector o lo q queramos, luego 1->fila, 2-> columna o 1:2 para todas las filas y columnas y luego la fucnion q quieras aplicar
# lapply te devuelve una lista
lapply(m, class)
## Ej7
pioneers <- c("GAUSS:1777","BAYES:1702","PASCAL:1623","PEARSON:1857")
#Separa los nombres y años usando strplit()
strsplit(pioneers,:)
#Separa los nombres y años usando strplit()
strsplit(pioneers,":")
#Separa los nombres y años usando strplit()
split_names<- strsplit(pioneers,":")
# Aplica la funcion tolower  todos los elementos de split_math para convertirlos en minusculas
split_low<- tolower(split_names)
split_low
# Aplica la funcion tolower  todos los elementos de split_math para convertirlos en minusculas
split_low<- lapply(split_names, tolower)
split_low
primero_elemento <- function(x){
return (x[[1]])
}
primero_elemento(pioneers)
#Aplica la funcion select_second a split_low
lapply(split_low, select_second)
#Aplica la funcion select_second a split_low
lapply(split_low, select_second)
cion que devuelva el primer elemento de un vector
#Aplica la funcion select_second a split_low
lapply(split_low, select_second)
select_second <- function(x){
return (x[[2]])
}
select_second(pioneers)
#Aplica la funcion select_second a split_low
lapply(split_low, select_second)
